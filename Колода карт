using System;
using System.Collections.Generic;
using System.Net.NetworkInformation;
using System.Threading;

internal class Program
{
    private static void Main(string[] args)
    {
        Casino game = new Casino();
        game.PlayGame();
    }
}

public class Casino
{
    private Player _user = new Player();
    private Deck _pack = new Deck();

    public void PlayGame()
    {
        const string CommandTakeCard = "1";
        const string CommandShowAllCards = "2";
        const string CommandExit = "3";

        bool isPlaying = true;

        _pack.Pack();

        while (isPlaying)
        {
            Console.WriteLine("Добро пожаловать в казино!");
            Console.WriteLine($"Максимальное количество карт на руке - {Player.MaxCardsOnHand} шт., но вы можете взять меньше.");
            Console.WriteLine("Выберите действие:");
            Console.WriteLine($"{CommandTakeCard} - Взять карту.");
            Console.WriteLine($"{CommandShowAllCards} - Посмотреть все карты на руке.");
            Console.WriteLine($"{CommandExit} - Выйти из игры.");
            string userInput = Console.ReadLine();

            switch (userInput)
            {
                case CommandTakeCard:

                    if (_user.CanDraw())
                    {
                        Card drawnCard = _pack.GiveCard();

                        if (drawnCard != null)
                        {
                            _user.DrawCard(drawnCard);
                        }
                        else
                        {
                            Console.WriteLine("Невозможно взять карту. Колода пуста.");
                        }
                    }
                    else
                    {
                        Console.WriteLine("У Вас уже максимальное количество карт.");
                    }
                    break;

                case CommandShowAllCards:
                    _user.ShowCardsOnHand();
                    break;

                case CommandExit:
                    isPlaying = false;
                    Console.WriteLine("Вы вышли из игры.");
                    break;

                default:
                    Console.WriteLine("Такого действия нет!");
                    break;
            }

            Console.WriteLine("Нажмите любую клавишу чтобы продолжить.");
            Console.ReadKey(); 
            Console.Clear();
        }
    }
}

public class Deck
{
    private List<Card> _pack = new List<Card>();

    public Card GiveCard()
    {
        if(_pack.Count > 0)
        {
            Card cardToGive = _pack[_pack.Count - 1];
            _pack.Remove(cardToGive);

            return cardToGive;
        }
        else
        {
            Console.WriteLine("Колода карт пуста.");

            return null;
        }
    }

    private void Create()
    {
        _pack.Clear();

        string[] meanings = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "Король", "Королева", "Валет", "Туз" };
        string[] suits = { "Черви", "Бубны", "Пики", "Трефы" };

        foreach (string meaning in meanings)
        {
            foreach (string suit in suits)
            {
                _pack.Add(new Card(meaning, suit));
            }
        }
    }

    private void Shuffle()
    {
        Random random = new Random();

        for (int amountCardsInDeck = _pack.Count; amountCardsInDeck > 1; amountCardsInDeck--)
        {
            int randomValue = random.Next(amountCardsInDeck);
            Card value = _pack[randomValue];
            _pack[randomValue] = _pack[amountCardsInDeck - 1];
            _pack[amountCardsInDeck - 1] = value;
        }
    }

    public void Pack()
    {
        Create();
        Shuffle();
    }
}

public class Card
{
    public Card(string meaning, string suit)
    {
        Meaning = meaning;
        Suit = suit;
    }

    public string Meaning { get; private set; }
    public string Suit { get; private set; }

    public void ShowInfo()
    {
        Console.WriteLine($"Карта со значением - {Meaning}, масть - {Suit}.");
    }
} 

public class Player
{
    public const int MaxCardsOnHand = 5;
    private List<Card> _cardsOnHand = new List<Card>();

    public bool CanDraw()
    {
        return _cardsOnHand.Count < MaxCardsOnHand;
    }

    public void DrawCard(Card card)
    {
        if (card == null)
        {
            Console.WriteLine("Невозможно взять карту.");
            return;
        }

        _cardsOnHand.Add(card);
        Console.WriteLine("Вы взяли карту: ");
        card.ShowInfo();
    }

    public void ShowCardsOnHand()
    {
        if (_cardsOnHand.Count > 0)
        {
            Console.WriteLine("\nСписок карт на руке: ");

            foreach (var card in _cardsOnHand)
            {
                card.ShowInfo();
            }
        }
        else
        {
            Console.WriteLine("У Вас нет карт на руке.");
        }
    }
}
